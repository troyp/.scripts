#! /usr/bin/env perl

# converts anime episode list CSV (generated using .pentadactylrc command `table2csv`)
# into a list of file names in format:  `number - english ・ romaji (japanese)`

my $usage = "Usage: animeepisodes-from-wp [OPTION...] [FILE]

    -h\tShow this help text
    -o\tOnly process odd lines
    -2\tTable has additional 2nd column between `number` and `english`, which should be ignored\n";

my $odd_only = 0;
my $ignore_second = 0;

while ( $ARGV[0] =~ "^-" ) {
    if ( "$ARGV[0]" =~ /^--?h(elp)?$/ ) {
        print "$usage";
        exit;
    }
    if ( "$ARGV[0]" =~ /^--?(o|odd-lines-only)$/ ) {    # FIXME
        $odd_only = 1;
        shift;
    }
    if ( "$ARGV[0]" =~ /^--?(2|ignore-second-column)$/ ) {
        $ignore_second = 1;
        shift;
    }
}

my $f = @ARGV>0 ? $ARGV[0] : '-';

open IN, "< $f" or die "$0: open $f failed, code $!\n";
while ( defined ($_=<IN>) ) {
    unless ( $odd_only && $. % 2 ) {
        if ($ignore_second) { s/([^,]+),([^,]+),(.*)",.*/$1,$3/; }

        s/([^,]+,[^,]+)",.*/$1/;
        s/"(\d+)","""([^"]+)" (?:"([^"]+)"([^"]+?))?(\s| )*$/$1 - $2 ・ $3$4/;

        # if string ends in " ・ " (ie. no japanese name), delete the " ・ ".
        # note: \xe3\x83\xbb is "・" as an 8-bit string.
        s/ \xe3\x83\xbb $//;
        print "$_\n";

    }
}

close IN or die "$0: close $f failed, code $!\n";
