#! /usr/bin/env python
from datetime import date, timedelta
import argparse

def weeksfrom(d, m, y=None):
    start = date((y or date.today().year), m, d)
    def weeksfromdate(nweeks, verbose=False):
        finish = start + timedelta(weeks = nweeks)
        finishstr = finish.strftime('%d %b %Y' if y else '%d %b')
        if verbose:
            return '%s  +  %d weeks  ==  %s' % (
                start.strftime('%d %b %Y' if y else '%d %b'),
                nweeks,
                finishstr)
        else:
            return finishstr
    return  weeksfromdate

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='weeksfrom NUMWEEKS DAY MONTH [YEAR]')
    parser.add_argument('numweeks', type=int, help='number of weeks')
    parser.add_argument('day', type=int, help='day of month')
    parser.add_argument('month', type=int, help='month of year')
    parser.add_argument('year', type=int, nargs='?', default=None, help='year')
    parser.add_argument('-r', '--repeat', help='run in loop', action="store_true")
    args = parser.parse_args()
    if args.repeat:
        print weeksfrom(args.day, args.month, args.year)(args.numweeks, verbose=True)
        while True:
            raw = raw_input("DAY MONTH [YEAR] > ")
            args = [int(s) for s in raw.split()]
            if not args:
                break
            if len(args) == 2:
                args.append(None)
            print weeksfrom(*args[1:])(args[0], verbose=True)
    else:
        print weeksfrom(args.day, args.month, args.year)(args.numweeks)
